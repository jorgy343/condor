//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Casm.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Casm.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CasmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, LABEL=2, REGISTERREFERENCE=3, REGISTER=4, DIRECTIVE=5, COMMENT=6, 
		NAME=7, NUMBER=8, HEXNUMBER=9, DECIMALNUMBER=10, BINARYNUMBER=11, EOL=12, 
		WS=13;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_label = 2, RULE_instruction = 3, 
		RULE_directive = 4, RULE_expressionList = 5, RULE_expression = 6, RULE_register = 7, 
		RULE_registerReference = 8, RULE_comment = 9;
	public static readonly string[] ruleNames = {
		"prog", "statement", "label", "instruction", "directive", "expressionList", 
		"expression", "register", "registerReference", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "LABEL", "REGISTERREFERENCE", "REGISTER", "DIRECTIVE", "COMMENT", 
		"NAME", "NUMBER", "HEXNUMBER", "DECIMALNUMBER", "BINARYNUMBER", "EOL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Casm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CasmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CasmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CasmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(CasmParser.Eof, 0); }
		public ITerminalNode[] EOL() { return GetTokens(CasmParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(CasmParser.EOL, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; statement();
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 21; Match(EOL);
				State = 22; statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 30; label();
				}
			}

			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 33; instruction();
				}
				break;
			case DIRECTIVE:
				{
				State = 34; directive();
				}
				break;
			case Eof:
			case COMMENT:
			case EOL:
				break;
			default:
				break;
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 37; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(CasmParser.LABEL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CasmParser.NAME, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(NAME);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REGISTERREFERENCE) | (1L << REGISTER) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 43; expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode DIRECTIVE() { return GetToken(CasmParser.DIRECTIVE, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(DIRECTIVE);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REGISTERREFERENCE) | (1L << REGISTER) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 47; expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 10, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; expression();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 51; Match(T__0);
				State = 52; expression();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public RegisterReferenceContext registerReference() {
			return GetRuleContext<RegisterReferenceContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(CasmParser.NUMBER, 0); }
		public ITerminalNode NAME() { return GetToken(CasmParser.NAME, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGISTER:
				{
				State = 58; register();
				}
				break;
			case REGISTERREFERENCE:
				{
				State = 59; registerReference();
				}
				break;
			case NUMBER:
				{
				State = 60; Match(NUMBER);
				}
				break;
			case NAME:
				{
				State = 61; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterContext : ParserRuleContext {
		public ITerminalNode REGISTER() { return GetToken(CasmParser.REGISTER, 0); }
		public RegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterRegister(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitRegister(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegisterContext register() {
		RegisterContext _localctx = new RegisterContext(Context, State);
		EnterRule(_localctx, 14, RULE_register);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(REGISTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterReferenceContext : ParserRuleContext {
		public ITerminalNode REGISTERREFERENCE() { return GetToken(CasmParser.REGISTERREFERENCE, 0); }
		public RegisterReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_registerReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterRegisterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitRegisterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegisterReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegisterReferenceContext registerReference() {
		RegisterReferenceContext _localctx = new RegisterReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_registerReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(REGISTERREFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(CasmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICasmListener typedListener = listener as ICasmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICasmVisitor<TResult> typedVisitor = visitor as ICasmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 18, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', 'I', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '&', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '/', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x33', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x38', 
		'\n', '\a', '\f', '\a', '\xE', '\a', ';', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x41', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 'I', '\x2', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'*', '\x3', '\x2', '\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x46', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1B', '\x5', '\x4', 
		'\x3', '\x2', '\x17', '\x18', '\a', '\xE', '\x2', '\x2', '\x18', '\x1A', 
		'\x5', '\x4', '\x3', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\a', '\x2', '\x2', '\x3', '\x1F', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\"', '\x5', '\x6', '\x4', '\x2', '!', ' ', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '%', 
		'\x3', '\x2', '\x2', '\x2', '#', '&', '\x5', '\b', '\x5', '\x2', '$', 
		'&', '\x5', '\n', '\x6', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '(', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\x5', '\x14', '\v', 
		'\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', 
		'\x4', '\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', '\x2', ',', '.', 
		'\a', '\t', '\x2', '\x2', '-', '/', '\x5', '\f', '\a', '\x2', '.', '-', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\a', '\a', '\x2', '\x2', 
		'\x31', '\x33', '\x5', '\f', '\a', '\x2', '\x32', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\x5', '\xE', '\b', '\x2', 
		'\x35', '\x36', '\a', '\x3', '\x2', '\x2', '\x36', '\x38', '\x5', '\xE', 
		'\b', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\r', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '\x41', '\x5', '\x10', 
		'\t', '\x2', '=', '\x41', '\x5', '\x12', '\n', '\x2', '>', '\x41', '\a', 
		'\n', '\x2', '\x2', '?', '\x41', '\a', '\t', '\x2', '\x2', '@', '<', '\x3', 
		'\x2', '\x2', '\x2', '@', '=', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\x6', '\x2', '\x2', 
		'\x43', '\x11', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x5', 
		'\x2', '\x2', '\x45', '\x13', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\a', '\b', '\x2', '\x2', 'G', '\x15', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x1B', '!', '%', '(', '.', '\x32', '\x39', '@',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Casm.Antlr
